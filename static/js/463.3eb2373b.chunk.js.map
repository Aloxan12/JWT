{"version":3,"file":"static/js/463.3eb2373b.chunk.js","mappings":"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","sources":["webpack://client/./src/pages/Posts/ui/Posts.module.scss?c94c","app/core/api/postApi.ts","pages/Posts/ui/containers/CreatePost/CreatePost.tsx","webpack://client/./src/pages/Posts/ui/containers/Post/Post.module.scss?0eab","shared/lib/helpers.tsx","webpack://client/./src/shared/ui/AppTrash/AppTrash.module.scss?1201","shared/ui/AppTrash/AppTrash.tsx","pages/Posts/ui/containers/Post/Post.tsx","pages/Posts/ui/hooks/useLikePost.ts","pages/Posts/ui/containers/PostList/PostList.tsx","pages/Posts/ui/hooks/useDeletePost.ts","shared/lib/hooks/useInfiniteScroll.ts","shared/lib/hooks/useOnScreen.ts","pages/Posts/ui/Posts.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Posts_container__fKaSN\",\"row\":\"Posts_row__ZN1Oi\",\"col\":\"Posts_col__O3tuq\",\"col-1\":\"Posts_col-1__pQJjt\",\"col-2\":\"Posts_col-2__qHYTd\",\"col-3\":\"Posts_col-3__jAP7F\",\"col-4\":\"Posts_col-4__dddLD\",\"col-5\":\"Posts_col-5__74WnE\",\"col-6\":\"Posts_col-6__qAlIa\",\"col-7\":\"Posts_col-7__an18j\",\"col-8\":\"Posts_col-8__1iz3t\",\"col-9\":\"Posts_col-9__gbuu0\",\"col-10\":\"Posts_col-10__lK9xS\",\"col-11\":\"Posts_col-11__W5YcE\",\"col-12\":\"Posts_col-12__neDSq\",\"col-xs-1\":\"Posts_col-xs-1__e1yU1\",\"col-xs-2\":\"Posts_col-xs-2__wRQ-a\",\"col-xs-3\":\"Posts_col-xs-3__Xm2nm\",\"col-xs-4\":\"Posts_col-xs-4__WVJcv\",\"col-xs-5\":\"Posts_col-xs-5__34SlK\",\"col-xs-6\":\"Posts_col-xs-6__WEPNq\",\"col-xs-7\":\"Posts_col-xs-7__3yVBo\",\"col-xs-8\":\"Posts_col-xs-8__H29PK\",\"col-xs-9\":\"Posts_col-xs-9__JANMt\",\"col-xs-10\":\"Posts_col-xs-10__ykcjD\",\"col-xs-11\":\"Posts_col-xs-11__2uBwK\",\"col-xs-12\":\"Posts_col-xs-12__gubIs\",\"col-sm-1\":\"Posts_col-sm-1__dZoL+\",\"col-sm-2\":\"Posts_col-sm-2__tQk2n\",\"col-sm-3\":\"Posts_col-sm-3__fFfQi\",\"col-sm-4\":\"Posts_col-sm-4__59j4N\",\"col-sm-5\":\"Posts_col-sm-5__t32gc\",\"col-sm-6\":\"Posts_col-sm-6__VFrQT\",\"col-sm-7\":\"Posts_col-sm-7__Ti88E\",\"col-sm-8\":\"Posts_col-sm-8__Bs91f\",\"col-sm-9\":\"Posts_col-sm-9__6iCse\",\"col-sm-10\":\"Posts_col-sm-10__atC40\",\"col-sm-11\":\"Posts_col-sm-11__F2GMa\",\"col-sm-12\":\"Posts_col-sm-12__cLfmN\",\"col-md-1\":\"Posts_col-md-1__KwG0H\",\"col-md-2\":\"Posts_col-md-2__ZGmX6\",\"col-md-3\":\"Posts_col-md-3__NHvfV\",\"col-md-4\":\"Posts_col-md-4__hzikR\",\"col-md-5\":\"Posts_col-md-5__yHC3H\",\"col-md-6\":\"Posts_col-md-6__d2kxY\",\"col-md-7\":\"Posts_col-md-7__D0sBM\",\"col-md-8\":\"Posts_col-md-8__ORorQ\",\"col-md-9\":\"Posts_col-md-9__fCbhP\",\"col-md-10\":\"Posts_col-md-10__Zd3Y9\",\"col-md-11\":\"Posts_col-md-11__VZ8DA\",\"col-md-12\":\"Posts_col-md-12__3la-V\",\"col-lg-1\":\"Posts_col-lg-1__sBQTu\",\"col-lg-2\":\"Posts_col-lg-2__jKl1h\",\"col-lg-3\":\"Posts_col-lg-3__Fdlkj\",\"col-lg-4\":\"Posts_col-lg-4__T5pSx\",\"col-lg-5\":\"Posts_col-lg-5__d0S9A\",\"col-lg-6\":\"Posts_col-lg-6__qQQuK\",\"col-lg-7\":\"Posts_col-lg-7__TLYda\",\"col-lg-8\":\"Posts_col-lg-8__Dxe9w\",\"col-lg-9\":\"Posts_col-lg-9__hEmJ2\",\"col-lg-10\":\"Posts_col-lg-10__ZBizq\",\"col-lg-11\":\"Posts_col-lg-11__MWxqh\",\"col-lg-12\":\"Posts_col-lg-12__wePit\",\"col-xl-1\":\"Posts_col-xl-1__lvc9a\",\"col-xl-2\":\"Posts_col-xl-2__Zb7Rt\",\"col-xl-3\":\"Posts_col-xl-3__XTpE6\",\"col-xl-4\":\"Posts_col-xl-4__+x69S\",\"col-xl-5\":\"Posts_col-xl-5__sapM9\",\"col-xl-6\":\"Posts_col-xl-6__zco2z\",\"col-xl-7\":\"Posts_col-xl-7__KtwOy\",\"col-xl-8\":\"Posts_col-xl-8__jTVoQ\",\"col-xl-9\":\"Posts_col-xl-9__f6akl\",\"col-xl-10\":\"Posts_col-xl-10__LEgHV\",\"col-xl-11\":\"Posts_col-xl-11__V0rvR\",\"col-xl-12\":\"Posts_col-xl-12__Php4p\",\"col-xxs-1\":\"Posts_col-xxs-1__oSUkJ\",\"col-xxs-2\":\"Posts_col-xxs-2__QnUiD\",\"col-xxs-3\":\"Posts_col-xxs-3__5KEpl\",\"col-xxs-4\":\"Posts_col-xxs-4__+z9UX\",\"col-xxs-5\":\"Posts_col-xxs-5__1R5Jx\",\"col-xxs-6\":\"Posts_col-xxs-6__B9Kwh\",\"col-xxs-7\":\"Posts_col-xxs-7__m8wxa\",\"col-xxs-8\":\"Posts_col-xxs-8__2wyh-\",\"col-xxs-9\":\"Posts_col-xxs-9__TfJFg\",\"col-xxs-10\":\"Posts_col-xxs-10__1M8hl\",\"col-xxs-11\":\"Posts_col-xxs-11__k11GX\",\"col-xxs-12\":\"Posts_col-xxs-12__bI3qL\",\"postBlock\":\"Posts_postBlock__TuvF-\",\"postsItems\":\"Posts_postsItems__6kXGQ\",\"postTrashBlock\":\"Posts_postTrashBlock__wmQS2\",\"postCreate\":\"Posts_postCreate__z5tCB\",\"postEditBlock\":\"Posts_postEditBlock__WKy92\"};","import { ICreatePost, IPost, IPostRequestDto, IPostsResponseDto } from './dto/PostDto';\nimport { authApi } from './authApi';\n\nexport const postApi = authApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAllPosts: build.query<IPostsResponseDto, IPostRequestDto | void | null>({\n      query: (params) => ({\n        url: '/posts',\n        params: !!params ? params : {},\n      }),\n      providesTags: ['Posts', 'Users'],\n    }),\n    createPosts: build.mutation<IPost, ICreatePost>({\n      query: (params) => ({\n        url: '/posts',\n        method: 'POST',\n        body: params,\n      }),\n    }),\n    likePost: build.mutation<IPost, { id: string }>({\n      query: ({ id }) => ({\n        url: `/posts/${id}/like`,\n        method: 'PATCH',\n      }),\n      invalidatesTags: (result, error, post) => [{ type: 'Posts', id: post.id }],\n    }),\n    deletePost: build.mutation<{ post: IPost }, { id: string }>({\n      query: ({ id }) => ({\n        url: `/posts/${id}`,\n        method: 'DELETE',\n      }),\n      invalidatesTags: (result, error, post) => [{ type: 'Posts', id: post.id }],\n    }),\n  }),\n});\n\nexport const {\n  useGetAllPostsQuery,\n  useCreatePostsMutation,\n  useLikePostMutation,\n  useDeletePostMutation,\n} = postApi;\n","import { AppTextarea } from '../../../../../shared/ui/AppTextarea/AppTextarea';\nimport { AppButton } from '../../../../../shared/ui/AppButton/AppButton';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport React, { useState } from 'react';\nimport { ToastWrapper, ToastWrapperType } from '../../../../../entities/ToastWrapper/ToastWrapper';\nimport { useCreatePostsMutation } from '../../../../../app/core/api/postApi';\nimport moment from 'moment';\nimport { useSelector } from 'react-redux';\nimport { RootState } from '../../../../../app/core/redux/store';\nimport { IUser } from '../../../../../app/core/api/dto/UserDto';\nimport { IPost } from '../../../../../app/core/api/dto/PostDto';\n\ninterface CreatePostProps {\n  setCurrentData: React.Dispatch<React.SetStateAction<IPost[]>>;\n}\n\nexport const CreatePost = ({ setCurrentData }: CreatePostProps) => {\n  const user = useSelector<RootState, IUser | null>((state) => state.auth.user);\n  const [postText, setPostText] = useState('');\n\n  const [createPost, { isLoading: isLoadingCreate }] = useCreatePostsMutation();\n\n  const createPostHandler = () => {\n    if (user && postText !== '') {\n      createPost({ author: user.id, postText, publicDate: moment(new Date()).toISOString() }).then(\n        (res) => {\n          const newPost = (res as unknown as { data: { post: IPost } }).data.post;\n          setPostText('');\n          setCurrentData((prevState) => [newPost, ...prevState]);\n          ToastWrapper({\n            msg: 'Пост опубликован'.replace(/\"/g, ''),\n            type: ToastWrapperType.success,\n          });\n        }\n      );\n    }\n  };\n\n  return (\n    <Flex direction=\"column\" align=\"start\" max gap=\"16\">\n      <AppTextarea value={postText} onChange={setPostText} fullWidth rows=\"3\" />\n      <AppButton\n        title=\"Опубликовать\"\n        onClick={createPostHandler}\n        theme=\"full-bg\"\n        disabled={!postText}\n        isLoading={isLoadingCreate}\n      />\n    </Flex>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"postsItem\":\"Post_postsItem__WtXR8\",\"postDateBlock\":\"Post_postDateBlock__dkPvd\",\"email\":\"Post_email__RlJ5t\",\"postLikeBlock\":\"Post_postLikeBlock__pPpJ5\",\"likeActive\":\"Post_likeActive__D9EwX\",\"likeLoading\":\"Post_likeLoading__uCHUm\",\"postsItemContent\":\"Post_postsItemContent__pyt4f\"};","import { RoleTypes } from '../../app/core/router/AppRouter';\n\nexport const contentToHtml = (text: string) =>\n  text\n    .split(/\\n(?!\\n)/)\n    .filter((item) => item !== '')\n    .map((paragraph: string, index: number) => (\n      <p key={`${paragraph}- key ${index}`}>{paragraph}</p>\n    ));\n\nexport const getFileType = (fileName?: string) => {\n  return `${fileName}`.split('').reverse().join('').split('.')[0].split('').reverse().join('');\n};\n\nconst memoizedIsAdmin = () => {\n  let cache: { [key in string]: boolean } = {};\n  return (role?: RoleTypes): boolean => {\n    if (!!role) {\n      if (role in cache) {\n        return cache[role];\n      } else {\n        const isAdmin = role === RoleTypes.ADMIN;\n        cache[role] = isAdmin;\n        return isAdmin;\n      }\n    } else {\n      return false;\n    }\n  };\n};\n\nexport const useIsAdmin = memoizedIsAdmin();\n\nfunction formatBytes(bytes: number, decimals = 2) {\n  if (bytes === 0) {\n    return '0';\n  } else {\n    let k = 1024;\n    let dm = decimals < 0 ? 0 : decimals;\n    let sizes = ['байт', 'КБ', 'МБ', 'ГБ', 'ТБ'];\n    let i = Math.floor(Math.log(bytes) / Math.log(k));\n    return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i];\n  }\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"trash\":\"AppTrash_trash__kZGY9\",\"small\":\"AppTrash_small__abggq\",\"medium\":\"AppTrash_medium__Wbl99\",\"big\":\"AppTrash_big__1D8jV\",\"trashModelContent\":\"AppTrash_trashModelContent__dpjKk\"};","import React, { useState } from 'react';\nimport trashIco from '../../assets/images/trash.png';\nimport cls from './AppTrash.module.scss';\nimport { AppPhoto } from '../AppPhoto/AppPhoto';\nimport { AppModal } from '../AppModal/Modal';\nimport { classNames } from '../../lib/classNames/classNames';\nimport { AppButton } from '../AppButton/AppButton';\nimport { Flex } from '../Flex/Flex';\n\ninterface IAppTrashProps {\n  size?: 'big' | 'medium' | 'small';\n  deleteHandler: (onClose?: () => void) => void;\n  text?: string;\n}\n\nexport const AppTrash = ({ size = 'big', deleteHandler, text }: IAppTrashProps) => {\n  const [active, setActive] = useState<boolean>(false);\n\n  const onOpen = () => setActive(true);\n  const onClose = () => setActive(false);\n  return (\n    <React.Fragment>\n      <AppPhoto\n        src={trashIco}\n        alt=\"корзина\"\n        className={classNames(cls.trash, {}, [cls[size]])}\n        onClick={onOpen}\n      />\n      <AppModal isOpen={active} onClose={onClose} title=\"Предупреждение\" lazy>\n        <Flex direction=\"column\" gap=\"16\" align=\"start\">\n          <div>{text || 'Удалить?'}</div>\n          <Flex justify=\"between\" max>\n            <AppButton onClick={onClose} title=\"нет\" theme=\"full-bg\" />\n            <AppButton\n              onClick={() => {\n                deleteHandler(onClose);\n              }}\n              theme=\"full-bg\"\n              title=\"да\"\n            />\n          </Flex>\n        </Flex>\n      </AppModal>\n    </React.Fragment>\n  );\n};\n","import React, { memo, useState } from 'react';\nimport cls from './Post.module.scss';\nimport moment from 'moment';\nimport { contentToHtml } from '../../../../../shared/lib/helpers';\nimport { AppTrash } from '../../../../../shared/ui/AppTrash/AppTrash';\nimport { IPost } from '../../../../../app/core/api/dto/PostDto';\nimport likePhoto from '../../../../../shared/assets/images/like.png';\nimport { AppAvatar } from '../../../../../shared/ui/AppAvatar/AppAvatar';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport { AppText } from '../../../../../shared/ui/AppText/AppText';\nimport { AppPhoto } from '../../../../../shared/ui/AppPhoto/AppPhoto';\nimport { classNames, Mods } from '../../../../../shared/lib/classNames/classNames';\n\ninterface IPostProps {\n  isAdmin: boolean;\n  post: IPost;\n  measureRef?: (node: HTMLElement | null) => void;\n  likeLoading: boolean;\n  likePost: (id: string) => () => void;\n  deleteLoading: boolean;\n  deletePost: (id: string) => (onClose?: () => void) => void;\n}\n\nexport const Post = memo(\n  ({ post, isAdmin, measureRef, likePost, deletePost, likeLoading }: IPostProps) => {\n    const [loadingId, setLoadingId] = useState<null | string>(null);\n    const modsLike: Mods = {\n      [cls.likeActive]: post.isLike,\n    };\n\n    const loadingHandler = () => {\n      setLoadingId(post.id);\n    };\n\n    return (\n      <li className={cls.postsItem} ref={measureRef}>\n        <Flex max justify=\"between\">\n          <Flex gap=\"8\">\n            <AppAvatar src={post.author?.avatar || ''} />\n            <AppText\n              text={post.author.email}\n              color=\"violet\"\n              bold=\"600\"\n              isEllipsis\n              className={cls.email}\n            />\n          </Flex>\n          <Flex gap=\"8\" onClick={loadingHandler}>\n            <div\n              className={classNames(\n                cls.postLikeBlock,\n                { ...modsLike, [cls.likeLoading]: likeLoading && loadingId === post.id },\n                []\n              )}\n              onClick={likePost(post.id)}\n            >\n              <AppPhoto src={likePhoto} alt=\"like\" width={20} height={20} />\n              {post.likeCount}\n            </div>\n            {isAdmin && (\n              <div className={cls.postTrashBlock}>\n                <AppTrash\n                  deleteHandler={deletePost(post.id)}\n                  size={'medium'}\n                  text=\"Вы действительно хотите удалить данный пост?\"\n                />\n              </div>\n            )}\n          </Flex>\n        </Flex>\n        <div className={cls.postDateBlock}>\n          <span>\n            <span>Опубликовано:</span>{' '}\n            {moment(post.publicDate).format('DD-MM-YYYY') || 'Дата не зафикирована'}\n          </span>\n        </div>\n        <div className={cls.postsItemContent}>{contentToHtml(post.postText)}</div>\n      </li>\n    );\n  }\n);\n","import { useLikePostMutation } from '../../../../app/core/api/postApi';\nimport React, { useCallback, useState } from 'react';\nimport { IPost } from '../../../../app/core/api/dto/PostDto';\n\ntype UseLikePostResponse = [(id: string) => () => void, string | null];\n\nexport const useLikePost = (\n  setCurrentData: React.Dispatch<React.SetStateAction<IPost[]>>\n): UseLikePostResponse => {\n  const [likePost] = useLikePostMutation();\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  const likePostHandler = useCallback(\n    (id: string) => () => {\n      setActiveId(id);\n      likePost({ id })\n        .then((res) => {\n          const newPost = (res as unknown as { data: { post: IPost } })?.data?.post;\n          if (newPost) {\n            setCurrentData((prevState) =>\n              prevState.map((post) => (newPost.id === post.id ? newPost : post))\n            );\n          }\n        })\n        .finally(() => setActiveId(null));\n    },\n    []\n  );\n  return [likePostHandler, activeId];\n};\n","import React from 'react';\nimport cls from '../../Posts.module.scss';\nimport { IPost } from '../../../../../app/core/api/dto/PostDto';\nimport { Post } from '../Post/Post';\nimport { useAppSelector } from '../../../../../app/core/redux/store';\nimport { userIsAdmin } from '../../../../../app/core/redux/Reducers/auth/selectors';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport { AppSkeleton } from '../../../../../shared/ui/AppSkeleton/AppSkeleton';\nimport { useLikePost } from '../../hooks/useLikePost';\nimport { useDeletePost } from '../../hooks/useDeletePost';\n\nconst AppPostListLoader = () => {\n  return (\n    <Flex align=\"start\" direction=\"column\" gap=\"32\" max>\n      <AppSkeleton width=\"100%\" height=\"130px\" border=\"12px\" />\n      <AppSkeleton width=\"100%\" height=\"130px\" border=\"12px\" />\n      <AppSkeleton width=\"100%\" height=\"130px\" border=\"12px\" />\n      <AppSkeleton width=\"100%\" height=\"130px\" border=\"12px\" />\n    </Flex>\n  );\n};\n\ninterface PostListProps {\n  dataList: IPost[];\n  measureRef: (node: HTMLElement | null) => void;\n  isLoading: boolean;\n  setCurrentData: React.Dispatch<React.SetStateAction<IPost[]>>;\n}\n\nexport const PostList = ({ dataList, measureRef, isLoading, setCurrentData }: PostListProps) => {\n  const isAdmin = useAppSelector(userIsAdmin);\n  const [likePost, isLikeLoadingId] = useLikePost(setCurrentData);\n  const [deletePost, isDeleteLoadingId] = useDeletePost(setCurrentData);\n\n  return (\n    <>\n      <ul className={cls.postsItems}>\n        {dataList.map((post, index, arr) => {\n          const isLastEl = index === arr.length - 1;\n          return (\n            <Post\n              isAdmin={isAdmin}\n              post={post}\n              key={post.id}\n              measureRef={isLastEl ? measureRef : undefined}\n              likeLoading={post.id === isLikeLoadingId}\n              likePost={likePost}\n              deleteLoading={post.id === isDeleteLoadingId}\n              deletePost={deletePost}\n            />\n          );\n        })}\n      </ul>\n      {isLoading && <AppPostListLoader />}\n    </>\n  );\n};\n","import { useDeletePostMutation } from '../../../../app/core/api/postApi';\nimport { ToastWrapper, ToastWrapperType } from '../../../../entities/ToastWrapper/ToastWrapper';\nimport React, { useCallback, useState } from 'react';\nimport { IPost } from '../../../../app/core/api/dto/PostDto';\n\ntype UseDeletePostResponse = [(id: string) => (onClose?: () => void) => void, string | null];\n\nexport const useDeletePost = (\n  setCurrentData: React.Dispatch<React.SetStateAction<IPost[]>>\n): UseDeletePostResponse => {\n  const [deletePost] = useDeletePostMutation();\n  const [activeId, setActiveId] = useState<string | null>(null);\n\n  const deletePostHandler = useCallback(\n    (id: string) => (onClose?: () => void) => {\n      setActiveId(activeId);\n      deletePost({ id })\n        .then(() => {\n          ToastWrapper({\n            msg: 'Пост успешно удален',\n            type: ToastWrapperType.info,\n          });\n          setCurrentData((prevState) => prevState.filter((post) => post.id !== id));\n          onClose?.();\n        })\n        .finally(() => setActiveId(null));\n    },\n    []\n  );\n\n  return [deletePostHandler, activeId];\n};\n","import React, { useCallback, useEffect, useState } from 'react';\nimport { useOnScreen } from './useOnScreen';\nimport { BaseQueryDto, IWithPagination } from '../../../app/core/api/dto/BaseDto';\n\ninterface UseInfiniteScrollProps<Params extends IWithPagination> {\n  getter: (params: Params) => any;\n  page: number;\n  setPage: React.Dispatch<React.SetStateAction<number>>;\n}\n\ninterface IInfiniteScrollResults<T> extends BaseQueryDto {\n  results: T[] | [];\n}\ninterface GetterResponse<T> {\n  data?: IInfiniteScrollResults<T>;\n  isLoading: boolean;\n  isFetching: boolean;\n}\n\ninterface UseInfiniteScrollResponse<T> {\n  dataList: T[];\n  measureRef: (node: HTMLElement | null) => void;\n  isLoading: boolean;\n  setCurrentData: React.Dispatch<React.SetStateAction<T[]>>;\n}\n\nexport const useInfiniteScroll = <T extends { id: string }, Params extends IWithPagination>({\n  getter,\n  page,\n  setPage,\n}: UseInfiniteScrollProps<Params>): UseInfiniteScrollResponse<T> => {\n  const [currentData, setCurrentData] = useState<T[]>([]);\n  const { data, isLoading, isFetching } = getter({\n    page,\n    limit: 10,\n  } as Params) as GetterResponse<T>;\n  const { prevPage, nextPage, results } = data || {};\n\n  const { measureRef, isIntersecting, observer } = useOnScreen();\n\n  const loadMore = useCallback(() => {\n    setPage((page) => page + 1);\n  }, []);\n\n  useEffect(() => {\n    if (isIntersecting && nextPage) {\n      loadMore();\n      observer?.disconnect();\n    }\n  }, [isIntersecting, nextPage, loadMore]);\n\n  useEffect(() => {\n    if (results && !prevPage) setCurrentData(results);\n    if (results && !!prevPage) {\n      setCurrentData((prevData) => [...prevData, ...results]);\n    }\n  }, [results, prevPage]);\n\n  return { dataList: currentData, measureRef, isLoading: isLoading || isFetching, setCurrentData };\n};\n","import { useCallback, useState } from 'react';\n\ninterface IntersectionObserverOptions {\n  root?: Element | null;\n  rootMargin?: string;\n  threshold?: number | number[];\n}\n\ninterface UseOnScreenResult {\n  measureRef: (node: HTMLElement | null) => void;\n  isIntersecting: boolean;\n  observer: IntersectionObserver | undefined;\n}\n\nexport const useOnScreen = ({\n  root = null,\n  rootMargin = '0px',\n  threshold = 0,\n}: IntersectionObserverOptions = {}): UseOnScreenResult => {\n  const [observer, setObserver] = useState<IntersectionObserver>();\n  const [isIntersecting, setIntersecting] = useState(false);\n\n  const measureRef = useCallback(\n    (node: HTMLElement | null) => {\n      if (node) {\n        const newObserver = new IntersectionObserver(\n          ([entry]) => {\n            setIntersecting(entry.isIntersecting);\n          },\n          { root, rootMargin, threshold }\n        );\n\n        newObserver.observe(node);\n        setObserver(newObserver);\n      }\n    },\n    [root, rootMargin, threshold]\n  );\n\n  return { measureRef, isIntersecting, observer };\n};\n","import React, { useState } from 'react';\nimport styles from './Posts.module.scss';\nimport { AppTitle } from '../../../shared/ui/AppTitle/AppTitle';\nimport { AppCard } from '../../../shared/ui/AppCard/AppCard';\nimport { CreatePost } from './containers/CreatePost/CreatePost';\nimport { PostList } from './containers/PostList/PostList';\nimport { useInfiniteScroll } from '../../../shared/lib/hooks/useInfiniteScroll';\nimport { IPost } from '../../../app/core/api/dto/PostDto';\nimport { useGetAllPostsQuery } from '../../../app/core/api/postApi';\n\nconst Posts = () => {\n  const [page, setPage] = useState<number>(1);\n  const { dataList, measureRef, isLoading, setCurrentData } = useInfiniteScroll<IPost, {}>({\n    getter: useGetAllPostsQuery,\n    page,\n    setPage,\n  });\n\n  return (\n    <AppCard classNameContent={styles.postBlock} max boxShadow withoutBorder>\n      <AppTitle title=\"Посты\" titleTag=\"h1\" align=\"center\" />\n      <CreatePost setCurrentData={setCurrentData} />\n      <PostList\n        dataList={dataList}\n        setCurrentData={setCurrentData}\n        measureRef={measureRef}\n        isLoading={isLoading}\n      />\n    </AppCard>\n  );\n};\n\nexport default Posts;\n"],"names":["postApi","authApi","injectEndpoints","endpoints","build","getAllPosts","query","params","url","providesTags","createPosts","mutation","method","body","likePost","_ref","id","concat","invalidatesTags","result","error","post","type","deletePost","_ref2","useGetAllPostsQuery","useCreatePostsMutation","useLikePostMutation","useDeletePostMutation","CreatePost","setCurrentData","user","useSelector","state","auth","postText","setPostText","useState","createPost","isLoading","isLoadingCreate","_jsxs","Flex","direction","align","max","gap","children","_jsx","AppTextarea","value","onChange","fullWidth","rows","AppButton","title","onClick","createPostHandler","author","publicDate","moment","Date","toISOString","then","res","newPost","data","prevState","ToastWrapper","msg","replace","ToastWrapperType","success","theme","disabled","memoizedIsAdmin","cache","AppTrash","size","deleteHandler","text","active","setActive","onClose","React","AppPhoto","src","trashIco","alt","className","classNames","cls","trash","onOpen","AppModal","isOpen","lazy","justify","Post","memo","_post$author","isAdmin","measureRef","likeLoading","loadingId","setLoadingId","modsLike","likeActive","isLike","postsItem","ref","AppAvatar","avatar","AppText","email","color","bold","isEllipsis","loadingHandler","postLikeBlock","likePhoto","width","height","likeCount","postTrashBlock","postDateBlock","format","postsItemContent","split","filter","item","map","paragraph","index","AppPostListLoader","AppSkeleton","border","PostList","dataList","useAppSelector","userIsAdmin","isLikeLoadingId","activeId","setActiveId","useCallback","_data","finally","useLikePost","isDeleteLoadingId","info","useDeletePost","_Fragment","arr","isLastEl","length","undefined","deleteLoading","useInfiniteScroll","getter","page","setPage","currentData","isFetching","limit","prevPage","nextPage","results","isIntersecting","observer","root","rootMargin","threshold","arguments","setObserver","setIntersecting","node","newObserver","IntersectionObserver","entry","observe","useOnScreen","loadMore","useEffect","disconnect","prevData","Posts","AppCard","classNameContent","styles","boxShadow","withoutBorder","AppTitle","titleTag"],"sourceRoot":""}