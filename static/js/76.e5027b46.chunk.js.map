{"version":3,"file":"static/js/76.e5027b46.chunk.js","mappings":"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","sources":["webpack://client/./src/pages/ChatPage/ui/ChatPage.module.scss?e48e","webpack://client/./src/pages/ChatPage/ui/container/ChatList/ChatList.module.scss?3085","pages/ChatPage/ui/container/ChatList/ChatItem.tsx","app/core/api/chatApi.ts","pages/ChatPage/ui/container/ChatList/ChatList.tsx","webpack://client/./src/pages/ChatPage/ui/container/Chat/Chat.module.scss?17e6","pages/ChatPage/ui/container/Chat/components/Message.tsx","pages/ChatPage/ui/container/Chat/components/SendMessage.tsx","pages/ChatPage/ui/container/Chat/Chat.tsx","pages/ChatPage/ui/ChatPage.tsx","pages/ChatPage/helpers/connectionWs.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatPageWrapper\":\"ChatPage_chatPageWrapper__lVp4Z\",\"errorText\":\"ChatPage_errorText__wmL54\"};","// extracted by mini-css-extract-plugin\nexport default {\"chatList\":\"ChatList_chatList__MSrQz\",\"chatItem\":\"ChatList_chatItem__ul3Zy\",\"active\":\"ChatList_active__U-NA1\"};","import React from 'react';\nimport { classNames, Mods } from '../../../../../shared/lib/classNames/classNames';\nimport cls from './ChatList.module.scss';\nimport { IUser } from '../../../../../app/core/api/dto/UserDto';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport { AppAvatar } from '../../../../../shared/ui/AppAvatar/AppAvatar';\n\ninterface ChatItemProps {\n  users: IUser[];\n  currentUser: IUser | null;\n  isActive: boolean;\n  onClick: () => void;\n}\n\nexport const ChatItem = ({ users, isActive, currentUser, onClick }: ChatItemProps) => {\n  const mods: Mods = {\n    [cls.active]: isActive,\n  };\n  return (\n    <div className={classNames(cls.chatItem, mods, [])} onClick={onClick}>\n      {users\n        .filter((user) => user.id !== currentUser?.id)\n        .map(({ email, avatar, id }) => (\n          <Flex gap=\"8\" key={id}>\n            <AppAvatar src={avatar} />\n            <span>{email}</span>\n          </Flex>\n        ))}\n    </div>\n  );\n};\n","import { authApi } from './authApi';\nimport {\n  IChatDto,\n  IChatRequestDto,\n  IChatsResponseDto,\n  ICreateChat,\n  IMessageCreate,\n  IMessageDto,\n  IMessageRequest,\n  IMessageResponse,\n} from './dto/ChatDto';\n\nexport const chatApi = authApi.injectEndpoints({\n  endpoints: (build) => ({\n    getAllChats: build.query<IChatsResponseDto, IChatRequestDto | void | null>({\n      query: (params) => ({\n        url: '/chats/',\n        params: !!params ? params : {},\n      }),\n      providesTags: ['Chat', 'Users'],\n    }),\n    getMessagesList: build.query<IMessageResponse, IMessageRequest | void | null>({\n      query: (params) => ({\n        url: '/messages/',\n        params: !!params ? params : {},\n      }),\n      providesTags: ['Chat', 'Users'],\n    }),\n    createChat: build.mutation<IChatDto, ICreateChat>({\n      query: (params) => ({\n        url: '/chats/',\n        method: 'POST',\n        body: params,\n      }),\n    }),\n    createMessage: build.mutation<IMessageDto, IMessageCreate>({\n      query: (params) => ({\n        url: '/messages/',\n        method: 'POST',\n        body: params,\n      }),\n    }),\n  }),\n});\n\nexport const { useGetAllChatsQuery, useGetMessagesListQuery, useCreateChatMutation } = chatApi;\n","import React from 'react';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport { ChatItem } from './ChatItem';\nimport cls from './ChatList.module.scss';\nimport { useGetAllChatsQuery } from '../../../../../app/core/api/chatApi';\nimport { IUser } from '../../../../../app/core/api/dto/UserDto';\nimport { RoleTypes } from '../../../../../app/core/router/AppRouter';\n\ninterface ChatListProps {\n  currentUser: IUser | null;\n  chooseChatId: string | null;\n  onChooseChatHandler: (chatId: string | null) => () => void;\n}\n\nexport const ChatList = ({ currentUser, chooseChatId, onChooseChatHandler }: ChatListProps) => {\n  const { data: chatListData } = useGetAllChatsQuery();\n  return (\n    <Flex direction=\"column\" gap=\"16\" align=\"start\" className={cls.chatList}>\n      <ChatItem\n        users={[\n          {\n            email: 'Общий',\n            id: '1',\n            avatar: '',\n            role: RoleTypes.ADMIN,\n            isActivated: true,\n            status: '',\n          },\n        ]}\n        isActive={!chooseChatId}\n        currentUser={currentUser}\n        onClick={onChooseChatHandler(null)}\n      />\n      {chatListData?.results.map(({ id, users }) => (\n        <ChatItem\n          key={id}\n          users={users}\n          isActive={chooseChatId === id}\n          currentUser={currentUser}\n          onClick={onChooseChatHandler(id)}\n        />\n      ))}\n    </Flex>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"chatListWrapper\":\"Chat_chatListWrapper__dNvq5\",\"chatList\":\"Chat_chatList__4eBdN\",\"messageWrap\":\"Chat_messageWrap__9Ulq8\",\"corner\":\"Chat_corner__hOsTC\",\"connection\":\"Chat_connection__Gh14m\",\"owner\":\"Chat_owner__l23yO\",\"email\":\"Chat_email__FNDSz\"};","import { Flex } from '../../../../../../shared/ui/Flex/Flex';\nimport cls from '../Chat.module.scss';\nimport { IMessageResponse } from '../../../ChatPage';\nimport { AppAvatar } from '../../../../../../shared/ui/AppAvatar/AppAvatar';\nimport { AppText } from '../../../../../../shared/ui/AppText/AppText';\nimport { classNames, Mods } from '../../../../../../shared/lib/classNames/classNames';\n\ninterface MessageProps {\n  message: IMessageResponse;\n  isOwner: boolean;\n}\n\nexport const Message = ({ message, isOwner }: MessageProps) => {\n  const { text, author, event } = message;\n\n  const mods: Mods = {\n    [cls.owner]: isOwner,\n  };\n\n  if (event === 'connection') {\n    return (\n      <Flex max justify=\"center\" className={cls.connection}>\n        {author.email} подключился к чату\n      </Flex>\n    );\n  }\n\n  return (\n    <Flex max align=\"start\" gap=\"32\" className={classNames('', mods, [])}>\n      <Flex direction=\"column\" align=\"center\">\n        <AppAvatar src={author?.avatar} />\n        <AppText text={author?.email} size=\"14\" className={cls.email} />\n      </Flex>\n      <Flex align=\"start\" gap=\"8\" className={cls.messageWrap}>\n        <div>{text}</div>\n        <div className={cls.corner} />\n      </Flex>\n    </Flex>\n  );\n};\n","import React from 'react';\nimport cls from '../Chat.module.scss';\nimport { AppTextarea } from '../../../../../../shared/ui/AppTextarea/AppTextarea';\nimport { AppButton } from '../../../../../../shared/ui/AppButton/AppButton';\nimport { Flex } from '../../../../../../shared/ui/Flex/Flex';\n\ninterface SendMessageProps {\n  text: string;\n  setText: (value: string) => void;\n  sendMessage: () => void;\n}\n\nexport const SendMessage = ({ text, setText, sendMessage }: SendMessageProps) => {\n  return (\n    <Flex className={cls.chatForm} max direction=\"column\" gap=\"16\">\n      <AppTextarea placeholder=\"Введите текст\" value={text} onChange={setText} rows=\"3\" fullWidth />\n      <AppButton onClick={sendMessage} text=\"Отправить\" max theme=\"full-bg\" size=\"big\" />\n    </Flex>\n  );\n};\n","import React, { useCallback, useEffect, useRef, useState } from 'react';\nimport cls from './Chat.module.scss';\nimport { Flex } from '../../../../../shared/ui/Flex/Flex';\nimport { IMessage, IMessageResponse } from '../../ChatPage';\nimport { Message } from './components/Message';\nimport { IUser } from '../../../../../app/core/api/dto/UserDto';\nimport { useGetMessagesListQuery } from '../../../../../app/core/api/chatApi';\nimport { SendMessage } from './components/SendMessage';\n\ninterface ChatProps {\n  user: IUser | null;\n  chatId?: string;\n  messages: IMessageResponse[];\n  socket: React.MutableRefObject<WebSocket | null>;\n  setMessages: React.Dispatch<React.SetStateAction<IMessageResponse[]>>;\n}\n\nexport const Chat = ({ messages, socket, user, setMessages, chatId }: ChatProps) => {\n  const lastElRef = useRef<HTMLDivElement | null>(null);\n  const [firstLoad, setFirstLoad] = useState(true);\n  const [loadMore, setLoadMore] = useState(true);\n  const { data: messagesList } = useGetMessagesListQuery({ chatId, limit: 20 });\n\n  const [text, setText] = useState('');\n\n  useEffect(() => {\n    if (lastElRef.current && firstLoad && messagesList) {\n      console.log('dssd', lastElRef);\n      lastElRef.current?.scrollIntoView({\n        behavior: 'smooth',\n      });\n      setFirstLoad(false);\n    }\n  }, [messagesList]);\n\n  useEffect(() => {\n    if (messagesList && loadMore) {\n      const newArr: IMessageResponse[] = [...messagesList.results]\n        .reverse()\n        .map(({ text, id, author, publicDate }) => ({\n          text,\n          event: 'message',\n          id,\n          author,\n          date: publicDate,\n        }));\n      setMessages((prevState) => [...prevState, ...newArr]);\n      setLoadMore(false);\n    }\n  }, [messagesList]);\n\n  const sendMessage = useCallback(() => {\n    const newMessage: IMessage = {\n      author: user,\n      text,\n      event: 'message',\n      chatId,\n    };\n    socket?.current?.send(JSON.stringify(newMessage));\n    setText('');\n  }, [text, user, chatId]);\n\n  return (\n    <Flex align=\"start\" direction=\"column\" gap=\"32\" className={cls.chatListWrapper}>\n      <div className={cls.chatList}>\n        {messages.map((message, index) => (\n          <Message\n            key={`${index}-${message.id}`}\n            message={message}\n            isOwner={user?.id === message?.author?.id}\n          />\n        ))}\n        <div ref={lastElRef} />\n      </div>\n      <SendMessage text={text} setText={setText} sendMessage={sendMessage} />\n    </Flex>\n  );\n};\n","import React, { useRef, useState } from 'react';\nimport cls from './ChatPage.module.scss';\nimport { classNames } from '../../../shared/lib/classNames/classNames';\nimport { ChatList } from './container/ChatList/ChatList';\nimport { Chat } from './container/Chat/Chat';\nimport { Flex } from '../../../shared/ui/Flex/Flex';\nimport { useWsConnect } from '../helpers/connectionWs';\nimport { useAppSelector } from '../../../app/core/redux/store';\nimport { AppText } from '../../../shared/ui/AppText/AppText';\nimport { IUser } from '../../../app/core/api/dto/UserDto';\n\nexport interface IMessage {\n  text: string;\n  author: IUser | null;\n  event: 'connection' | 'message';\n  id?: number;\n  chatId?: string;\n}\n\nexport interface IMessageResponse {\n  text: string;\n  author: IUser;\n  event: 'connection' | 'message';\n  id?: string;\n  date?: string;\n}\n\nconst ChatPage = () => {\n  const { user } = useAppSelector((state) => state.auth);\n  const [messages, setMessages] = useState<IMessageResponse[]>([]);\n  const [connected, setConnected] = useState(false);\n  const [chooseChatId, setChooseChatId] = useState<null | string>(null);\n  const socket = useRef<WebSocket | null>(null);\n\n  useWsConnect(socket, setConnected, setMessages, user);\n\n  const onChooseChatHandler = (chatId: string | null) => () => {\n    setMessages([]);\n    setChooseChatId(chatId);\n  };\n\n  return (\n    <Flex gap=\"32\" align=\"start\" className={classNames(cls.chatPageWrapper)}>\n      {!connected && <AppText text=\"Ошибка соединения\" color=\"red\" className={cls.errorText} />}\n      <ChatList\n        currentUser={user}\n        chooseChatId={chooseChatId}\n        onChooseChatHandler={onChooseChatHandler}\n      />\n      <Chat\n        messages={messages}\n        setMessages={setMessages}\n        socket={socket}\n        user={user}\n        chatId={chooseChatId || undefined}\n      />\n    </Flex>\n  );\n};\n\nexport default ChatPage;\n","import { localWs } from '../../../app/core/api/authApi';\nimport React, { MutableRefObject, useEffect } from 'react';\nimport { IMessageResponse } from '../ui/ChatPage';\nimport { IUser } from '../../../app/core/api/dto/UserDto';\n\nexport function useWsConnect(\n  socket: MutableRefObject<WebSocket | null>,\n  setConnected: (value: boolean) => void,\n  setMessages: React.Dispatch<React.SetStateAction<IMessageResponse[]>>,\n  user?: IUser | null\n) {\n  const message = {\n    id: 1,\n    event: 'connection',\n    author: user,\n    text: 'Подключился кто-то',\n  };\n  useEffect(() => {\n    socket.current = new WebSocket(localWs);\n    socket.current.onopen = () => {\n      setConnected(true);\n      socket.current?.send(JSON.stringify(message));\n      console.log('WebSocket connection opened');\n    };\n    socket.current.onmessage = (event) => {\n      const message: IMessageResponse = JSON.parse(event.data);\n      setMessages((prevState) => [...prevState, message]);\n      console.log('Received message:', message);\n    };\n    // socket.current.onclose = (event) => {\n    //   console.log('WebSocket connection closed', event);\n    // };\n    return () => {\n      if (socket.current) {\n        socket.current.close(); // Закрытие соединения\n        console.log('WebSocket connection closed');\n      }\n    };\n  }, []);\n}\n"],"names":["ChatItem","_ref","users","isActive","currentUser","onClick","mods","cls","_jsx","className","classNames","children","filter","user","id","map","_ref2","email","avatar","_jsxs","Flex","gap","AppAvatar","src","chatApi","authApi","injectEndpoints","endpoints","build","getAllChats","query","params","url","providesTags","getMessagesList","createChat","mutation","method","body","createMessage","useGetAllChatsQuery","useGetMessagesListQuery","useCreateChatMutation","ChatList","chooseChatId","onChooseChatHandler","data","chatListData","direction","align","role","RoleTypes","ADMIN","isActivated","status","results","Message","message","isOwner","text","author","event","owner","max","justify","connection","AppText","size","messageWrap","corner","SendMessage","setText","sendMessage","chatForm","AppTextarea","placeholder","value","onChange","rows","fullWidth","AppButton","theme","Chat","messages","socket","setMessages","chatId","lastElRef","useRef","firstLoad","setFirstLoad","useState","loadMore","setLoadMore","messagesList","limit","useEffect","_lastElRef$current","current","console","log","scrollIntoView","behavior","newArr","reverse","publicDate","date","prevState","useCallback","_socket$current","newMessage","send","JSON","stringify","chatListWrapper","chatList","index","_message$author","concat","ref","ChatPage","useAppSelector","state","auth","connected","setConnected","setChooseChatId","WebSocket","localWs","onopen","onmessage","parse","close","useWsConnect","color","undefined"],"sourceRoot":""}