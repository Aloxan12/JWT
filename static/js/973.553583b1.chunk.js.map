{"version":3,"file":"static/js/973.553583b1.chunk.js","mappings":"+RACA,EAA4B,yBAA5B,EAAiE,yBAAjE,EAAuG,0B,oBCiFvG,EA/Dc,WACZ,OAAwDA,EAAAA,EAAAA,MAAkB,eAAnEC,EAAK,YAAeC,EAAc,EAAzBC,UAA2BC,EAAO,EAAPA,QAErCC,GAAWC,EAAAA,EAAAA,MACXC,GAAWC,EAAAA,EAAAA,MAEjB,GAA0BC,EAAAA,EAAAA,UAAS,IAAG,eAA/BC,EAAK,KAAEC,EAAQ,KACtB,GAAgCF,EAAAA,EAAAA,UAAS,IAAG,eAArCG,EAAQ,KAAEC,EAAW,KAC5B,GAA0BJ,EAAAA,EAAAA,UAAS,IAAG,eAA/BK,EAAK,KAAEC,EAAQ,KA0BtB,OACE,UAACC,EAAA,EAAI,CAACC,IAAI,IAAIC,UAAU,SAASC,UAAWC,EAAeC,MAAM,SAASC,QAAQ,SAAQ,UACvFpB,IAAkB,SAACqB,EAAA,EAAS,KAC7B,SAACC,EAAA,EAAQ,CAACC,SAAS,KAAKC,MAAM,iGAC9B,SAACC,EAAA,EAAO,CAACC,iBAAkBR,EAAc,UACvC,UAACJ,EAAA,EAAI,CAACC,IAAI,KAAKC,UAAU,SAAQ,WAC/B,SAACW,EAAA,EAAQ,CACPC,MAAOpB,EACPqB,SAAUpB,EACVqB,KAAK,QACLC,MAAM,oDACNC,YAAY,+EAEd,SAACL,EAAA,EAAQ,CACPC,MAAOlB,EACPmB,SAAUlB,EACVmB,KAAM,WACNC,MAAM,mFACNC,YAAY,qFAEd,SAACC,EAAA,EAAS,CAACT,MAAM,iCAAQU,QA5CZ,WACnB,IACgB,KAAV1B,EACFK,EAAS,uHACa,KAAbH,EACTG,EAAS,yIAETd,EAAM,CAAES,MAAAA,EAAOE,SAAAA,IACZyB,SACAC,MAAK,SAACC,GACO,OAARA,GAAiBnC,IACnBC,GAASmC,EAAAA,EAAAA,IAAYD,KACrBE,EAAAA,EAAAA,GAAa,CACXC,IAAK,8HAA0BC,QAAQ,KAAM,IAC7CX,KAAMY,EAAAA,EAAAA,UAERrC,EAAS,KAEb,GAIN,CAFE,MAAOsC,GACPC,QAAQC,IAAIF,EACd,CACF,EAqBwDG,MAAM,YAErDlC,IAAS,SAACmC,EAAA,EAAO,CAACC,MAAM,MAAMC,KAAMrC,EAAOK,UAAWC,WAKjE,C","sources":["webpack://client/./src/pages/Login/ui/Login.module.scss?1885","pages/Login/ui/Login.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginWrap\":\"Login_loginWrap__Qr6m7\",\"loginForm\":\"Login_loginForm__iKRiP\",\"errorBlock\":\"Login_errorBlock__86tic\"};","import React, { useState } from 'react';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useLoginMutation } from '../../../app/core/api/authApi';\nimport { useAppDispatch } from '../../../app/core/redux/store';\nimport { setAuthData } from '../../../app/core/redux/Reducers/auth/authSlice';\nimport { useNavigate } from 'react-router-dom';\nimport {\n  ToastWrapper,\n  ToastWrapperType,\n} from '../../../Common/Components/ToastWrapper/ToastWrapper';\nimport { AppLoader } from '../../../Common/Components/AppLoader/AppLoader';\nimport { AppInput } from '../../../shared/ui/AppInput/AppInput';\nimport { AppButton } from '../../../shared/ui/AppButton/AppButton';\nimport { Flex } from '../../../shared/ui/Flex/Flex';\nimport { AppCard } from '../../../shared/ui/AppCard/AppCard';\nimport { AppTitle } from '../../../shared/ui/AppTitle/AppTitle';\nimport cls from './Login.module.scss';\nimport { AppText } from '../../../shared/ui/AppText/AppText';\n\nconst Login = () => {\n  const [login, { isLoading: isLoadingLogin, isError }] = useLoginMutation();\n\n  const dispatch = useAppDispatch();\n  const navigate = useNavigate();\n\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n\n  const loginHandler = () => {\n    try {\n      if (email === '') {\n        setError('Поле \"имя\" не заполнено!!');\n      } else if (password === '') {\n        setError('Поле \"пароль\" не заполнено!!');\n      } else {\n        login({ email, password })\n          .unwrap()\n          .then((res) => {\n            if (res !== null && !isError) {\n              dispatch(setAuthData(res));\n              ToastWrapper({\n                msg: 'Успешно вошли в систему'.replace(/\"/g, ''),\n                type: ToastWrapperType.success,\n              });\n              navigate('/');\n            }\n          });\n      }\n    } catch (e) {\n      console.log(e);\n    }\n  };\n  return (\n    <Flex gap=\"8\" direction=\"column\" className={cls.loginWrap} align=\"center\" justify=\"center\">\n      {isLoadingLogin && <AppLoader />}\n      <AppTitle titleTag=\"h2\" title=\"Добро пожаловать\" />\n      <AppCard classNameContent={cls.loginForm}>\n        <Flex gap=\"16\" direction=\"column\">\n          <AppInput\n            value={email}\n            onChange={setEmail}\n            type=\"email\"\n            label=\"Введите email:\"\n            placeholder=\"Введите свой email\"\n          />\n          <AppInput\n            value={password}\n            onChange={setPassword}\n            type={'password'}\n            label=\"Введите пароль:\"\n            placeholder=\"Введите пароль\"\n          />\n          <AppButton title=\"Войти\" onClick={loginHandler} theme=\"full-bg\" />\n          {/*<AppButton onClick={() => loginHandler(email, password)} text=\"Войти\" />*/}\n          {error && <AppText color=\"red\" text={error} className={cls.errorBlock} />}\n        </Flex>\n      </AppCard>\n    </Flex>\n  );\n};\n\nexport default Login;\n"],"names":["useLoginMutation","login","isLoadingLogin","isLoading","isError","dispatch","useAppDispatch","navigate","useNavigate","useState","email","setEmail","password","setPassword","error","setError","Flex","gap","direction","className","cls","align","justify","AppLoader","AppTitle","titleTag","title","AppCard","classNameContent","AppInput","value","onChange","type","label","placeholder","AppButton","onClick","unwrap","then","res","setAuthData","ToastWrapper","msg","replace","ToastWrapperType","e","console","log","theme","AppText","color","text"],"sourceRoot":""}